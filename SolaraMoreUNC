-- Import the custom module you provided
local MarketplaceService = game:GetService("MarketplaceService")
local HttpService = game:GetService("HttpService")

local module = {}  -- Custom module with helper functions

-- Helper function: Converts timestamp to milliseconds
local function timestampToMillis(timestamp)
    return (typeof(timestamp) == "string" and DateTime.fromIsoDate(timestamp).UnixTimestampMillis)
        or (typeof(timestamp) == "number" and timestamp)
        or timestamp.UnixTimestampMillis
end

-- Load a custom asset from URL or file
module.LoadCustomAsset = function(url)
    if getcustomasset then
        if url:lower():sub(1, 4) == "http" then
            local fileName = `temp_{tick()}.txt`
            writefile(fileName, game:HttpGet(url))
            local result = getcustomasset(fileName, true)
            delfile(fileName)
            return result
        elseif isfile(url) then
            return getcustomasset(url, true)
        end
    else
        warn("Executor doesn't support 'getcustomasset', rbxassetid only.")
    end
    if url:find("rbxassetid") or tonumber(url) then
        return "rbxassetid://" .. url:match("%d+")
    end
    error(debug.traceback("Failed to load custom asset for:\n" .. url))
end

-- Load a Roblox instance from a custom asset
module.LoadCustomInstance = function(url)
    local success, result = pcall(function()
        return game:GetObjects(module.LoadCustomAsset(url))[1]
    end)
    if success then
        return result
    else
        error("Failed to load instance from URL: " .. url)
    end
end

-- Main module setup
for name, func in pairs(module) do
    if typeof(func) == "function" then
        getgenv()[name] = func  -- Expose all functions to the global environment
    end
end

-- ==== Custom Require with Asset Loading Support ====

local loadedModules = {}  -- Cache for loaded modules

-- Enhanced require function that integrates custom asset loading
getgenv().require = function(module)
    -- Check if the module is already in cache
    if loadedModules[module] then
        return loadedModules[module]
    end

    -- Handle instances directly
    if typeof(module) == "Instance" then
        if module:IsA("ModuleScript") then
            local result = require(module)  -- Execute ModuleScript
            loadedModules[module] = result
            return result
        else
            loadedModules[module] = module  -- Store and return the instance
            return module
        end
    end

    -- If it's a string URL, try loading as a custom asset instance
    if type(module) == "string" and module:match("^http") then
        local instance = module.LoadCustomInstance(module)
        if instance then
            loadedModules[module] = instance
            return instance
        end
    end

    -- Handle rbxassetid
    if tonumber(module) or module:match("rbxassetid") then
        local assetId = module:match("%d+") or module
        local assetPath = "rbxassetid://" .. assetId
        loadedModules[module] = assetPath
        return assetPath
    end

    -- Try native require as a fallback
    local success, result = pcall(function()
        return require(module)
    end)

    if success then
        loadedModules[module] = result  -- Cache and return the result
        return result
    else
        error("Could not load module or resource: " .. tostring(module))
    end
end

-- ==== Custom FireSignal Function ====

getgenv().fireSignal = function(signal, ...)
    local getConnections = getconnections or get_signal_cons

    if not getConnections then
        error("fireSignal: Your executor does not support getconnections.")
    end

    if typeof(signal) ~= "Instance" then
        error("fireSignal: The provided signal is not a valid instance.")
    end

    for _, connection in ipairs(getConnections(signal)) do
        if connection.Function and connection.Enabled then
            task.defer(connection.Function, ...)  -- Execute asynchronously
        end
    end
end
